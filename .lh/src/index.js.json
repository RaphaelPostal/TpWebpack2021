{
    "sourceFile": "src/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1638480110045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1638480150071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+// import css from './css/style.css';\r\n+\r\n+require ('jquery')\r\n+\r\n+$(function(){\r\n+\r\n+})\r\n+\r\n+var mem = {\r\n+    // (A) PROPERTIES\r\n+    // (A1) HTML ELEMENTS\r\n+    hWrap : null, // HTML game wrapper\r\n+    hCards : null, // HTML cards\r\n+    // (A2) GAME SETTINGS\r\n+    sets : 6, // Total number of cards to match\r\n+    hint : 600, // How long to show mismatched cards\r\n+    url : \"\", // Optional, URL to images\r\n+    // (A3) FLAGS\r\n+    loaded : 0, // Total number of assets loaded\r\n+    time : 0,\r\n+    moves : 0, // Total number of moves\r\n+    last : null, // Last opened card\r\n+    grid : null, // Current play grid\r\n+    matches : null, // Current matched cards\r\n+    locked : null, // 2 cards chosen did not match\r\n+\r\n+    // (B) PRELOAD\r\n+    preload : function () {\r\n+        // (B1) GET HTML GAME WRAPPER\r\n+        mem.hWrap = document.getElementById(\"mem-game\");\r\n+\r\n+        // (B2) PRELOAD IMAGES\r\n+        for (let i=0; i<=mem.sets; i++) {\r\n+            let img = document.createElement(\"img\");\r\n+            img.onload = function(){\r\n+                mem.loaded++;\r\n+                if (mem.loaded == mem.sets+1) { mem.init(); }\r\n+            };\r\n+            img.src = '../src/images/'+mem.url+\"smiley-\"+i+\".png\";\r\n+        }\r\n+    },\r\n+\r\n+    // (C) INIT GAME\r\n+    init : function () {\r\n+        // (C1) RESET\r\n+        if (mem.locked != null) {\r\n+            clearTimeout(mem.locked);\r\n+            mem.locked = null;\r\n+        }\r\n+        mem.time = 0;\r\n+        mem.hCards = [];\r\n+        mem.grid = [];\r\n+        mem.matches = [],\r\n+            mem.moves = 0;\r\n+        mem.last = null;\r\n+        mem.locked = null;\r\n+        mem.hWrap.innerHTML = \"\";\r\n+\r\n+        // (C2) RANDOM RESHUFFLE CARDS\r\n+        // Credits : https://gomakethings.com/how-to-shuffle-an-array-with-vanilla-js/\r\n+        let current = mem.sets * 2, temp, random;\r\n+        for (var i=1; i<=mem.sets; i++) {\r\n+            mem.grid.push(i);\r\n+            mem.grid.push(i);\r\n+        }\r\n+        while (0 !== current) {\r\n+            random = Math.floor(Math.random() * current);\r\n+            current -= 1;\r\n+            temp = mem.grid[current];\r\n+            mem.grid[current] = mem.grid[random];\r\n+            mem.grid[random] = temp;\r\n+        }\r\n+\r\n+        // (C3) CREATE HTML CARDS\r\n+        for (let i=0; i<mem.sets * 2; i++) {\r\n+            let card = document.createElement(\"div\");\r\n+            card.className = \"mem-card\";\r\n+            card.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n+            card.dataset.idx = i;\r\n+            card.onclick = mem.open;\r\n+            mem.hWrap.appendChild(card);\r\n+            mem.hCards.push(card);\r\n+        }\r\n+    },\r\n+\r\n+    // (D) OPEN CARD\r\n+    open : function () { if (mem.locked == null) {\r\n+        if (mem.time == 0){\r\n+            setInterval(function(){\r\n+           mem.time++\r\n+\r\n+            }, 100)\r\n+        }\r\n+        \r\n+        // (D1) OPEN SELECTED CARD\r\n+        mem.moves++;\r\n+        let idx = this.dataset.idx;\r\n+        this.innerHTML = `<img src='../src/images/${mem.url}smiley-${mem.grid[idx]}.png'/>`;\r\n+        this.onclick = \"\";\r\n+        this.classList.add(\"open\");\r\n+\r\n+        // (D2) NO PREVIOUS GUESS - JUST RECORD AS OPENED\r\n+        if (mem.last == null) { mem.last = idx; }\r\n+\r\n+        else {\r\n+            // (D3) MATCHED AGAINST PREVIOUS GUESS\r\n+            if (mem.grid[idx] == mem.grid[mem.last]) {\r\n+                mem.matches.push(mem.last);\r\n+                mem.matches.push(idx);\r\n+                mem.hCards[mem.last].classList.remove(\"open\");\r\n+                mem.hCards[idx].classList.remove(\"open\");\r\n+                mem.hCards[mem.last].classList.add(\"right\");\r\n+                mem.hCards[idx].classList.add(\"right\");\r\n+                mem.last = null;\r\n+                if (mem.matches.length == mem.sets * 2) {\r\n+                    setTimeout(function(){\r\n+                        alert(\"C'EST LA WIN !\"+\"\\r\\n\"+\"MOUVEMENTS : \" + mem.moves+ \"\\r\\n\"+\"TEMPS : \"+(mem.time/10)+\" s.\");\r\n+                        mem.init();\r\n+                    }, 100)\r\n+                    \r\n+                }\r\n+            }\r\n+\r\n+            // (D4) NOT MATCHED - CLOSE BOTH CARDS ONLY AFTER A WHILE\r\n+            else {\r\n+                mem.hCards[mem.last].classList.add(\"wrong\");\r\n+                mem.hCards[idx].classList.add(\"wrong\");\r\n+                mem.locked = setTimeout(function(){\r\n+                    mem.close(idx, mem.last);\r\n+                }, mem.hint);\r\n+            }\r\n+        }\r\n+    }},\r\n+\r\n+    // (E) CLOSE PREVIOUSLY MIS-MATCHED CARDS\r\n+    close : function (aa, bb) {\r\n+        aa = mem.hCards[aa];\r\n+        bb = mem.hCards[bb];\r\n+        aa.classList.remove(\"wrong\");\r\n+        bb.classList.remove(\"wrong\");\r\n+        aa.classList.remove(\"open\");\r\n+        bb.classList.remove(\"open\");\r\n+        aa.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n+        bb.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n+        aa.onclick = mem.open;\r\n+        bb.onclick = mem.open;\r\n+        mem.locked = null;\r\n+        mem.last = null;\r\n+    }\r\n+};\r\n+\r\n+// (F) INIT GAME\r\n+window.addEventListener(\"DOMContentLoaded\", mem.preload);\r\n"
                },
                {
                    "date": 1638480157740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+require ('jquery')\r\n+\r\n+$(function(){\r\n+\r\n+})\r\n+\r\n+var mem = {\r\n+    // (A) PROPERTIES\r\n+    // (A1) HTML ELEMENTS\r\n+    hWrap : null, // HTML game wrapper\r\n+    hCards : null, // HTML cards\r\n+    // (A2) GAME SETTINGS\r\n+    sets : 6, // Total number of cards to match\r\n+    hint : 600, // How long to show mismatched cards\r\n+    url : \"\", // Optional, URL to images\r\n+    // (A3) FLAGS\r\n+    loaded : 0, // Total number of assets loaded\r\n+    time : 0,\r\n+    moves : 0, // Total number of moves\r\n+    last : null, // Last opened card\r\n+    grid : null, // Current play grid\r\n+    matches : null, // Current matched cards\r\n+    locked : null, // 2 cards chosen did not match\r\n+\r\n+    // (B) PRELOAD\r\n+    preload : function () {\r\n+        // (B1) GET HTML GAME WRAPPER\r\n+        mem.hWrap = document.getElementById(\"mem-game\");\r\n+\r\n+        // (B2) PRELOAD IMAGES\r\n+        for (let i=0; i<=mem.sets; i++) {\r\n+            let img = document.createElement(\"img\");\r\n+            img.onload = function(){\r\n+                mem.loaded++;\r\n+                if (mem.loaded == mem.sets+1) { mem.init(); }\r\n+            };\r\n+            img.src = '../src/images/'+mem.url+\"smiley-\"+i+\".png\";\r\n+        }\r\n+    },\r\n+\r\n+    // (C) INIT GAME\r\n+    init : function () {\r\n+        // (C1) RESET\r\n+        if (mem.locked != null) {\r\n+            clearTimeout(mem.locked);\r\n+            mem.locked = null;\r\n+        }\r\n+        mem.time = 0;\r\n+        mem.hCards = [];\r\n+        mem.grid = [];\r\n+        mem.matches = [],\r\n+            mem.moves = 0;\r\n+        mem.last = null;\r\n+        mem.locked = null;\r\n+        mem.hWrap.innerHTML = \"\";\r\n+\r\n+        // (C2) RANDOM RESHUFFLE CARDS\r\n+        // Credits : https://gomakethings.com/how-to-shuffle-an-array-with-vanilla-js/\r\n+        let current = mem.sets * 2, temp, random;\r\n+        for (var i=1; i<=mem.sets; i++) {\r\n+            mem.grid.push(i);\r\n+            mem.grid.push(i);\r\n+        }\r\n+        while (0 !== current) {\r\n+            random = Math.floor(Math.random() * current);\r\n+            current -= 1;\r\n+            temp = mem.grid[current];\r\n+            mem.grid[current] = mem.grid[random];\r\n+            mem.grid[random] = temp;\r\n+        }\r\n+\r\n+        // (C3) CREATE HTML CARDS\r\n+        for (let i=0; i<mem.sets * 2; i++) {\r\n+            let card = document.createElement(\"div\");\r\n+            card.className = \"mem-card\";\r\n+            card.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n+            card.dataset.idx = i;\r\n+            card.onclick = mem.open;\r\n+            mem.hWrap.appendChild(card);\r\n+            mem.hCards.push(card);\r\n+        }\r\n+    },\r\n+\r\n+    // (D) OPEN CARD\r\n+    open : function () { if (mem.locked == null) {\r\n+        if (mem.time == 0){\r\n+            setInterval(function(){\r\n+           mem.time++\r\n+\r\n+            }, 100)\r\n+        }\r\n+        \r\n+        // (D1) OPEN SELECTED CARD\r\n+        mem.moves++;\r\n+        let idx = this.dataset.idx;\r\n+        this.innerHTML = `<img src='../src/images/${mem.url}smiley-${mem.grid[idx]}.png'/>`;\r\n+        this.onclick = \"\";\r\n+        this.classList.add(\"open\");\r\n+\r\n+        // (D2) NO PREVIOUS GUESS - JUST RECORD AS OPENED\r\n+        if (mem.last == null) { mem.last = idx; }\r\n+\r\n+        else {\r\n+            // (D3) MATCHED AGAINST PREVIOUS GUESS\r\n+            if (mem.grid[idx] == mem.grid[mem.last]) {\r\n+                mem.matches.push(mem.last);\r\n+                mem.matches.push(idx);\r\n+                mem.hCards[mem.last].classList.remove(\"open\");\r\n+                mem.hCards[idx].classList.remove(\"open\");\r\n+                mem.hCards[mem.last].classList.add(\"right\");\r\n+                mem.hCards[idx].classList.add(\"right\");\r\n+                mem.last = null;\r\n+                if (mem.matches.length == mem.sets * 2) {\r\n+                    setTimeout(function(){\r\n+                        alert(\"C'EST LA WIN !\"+\"\\r\\n\"+\"MOUVEMENTS : \" + mem.moves+ \"\\r\\n\"+\"TEMPS : \"+(mem.time/10)+\" s.\");\r\n+                        mem.init();\r\n+                    }, 100)\r\n+                    \r\n+                }\r\n+            }\r\n+\r\n+            // (D4) NOT MATCHED - CLOSE BOTH CARDS ONLY AFTER A WHILE\r\n+            else {\r\n+                mem.hCards[mem.last].classList.add(\"wrong\");\r\n+                mem.hCards[idx].classList.add(\"wrong\");\r\n+                mem.locked = setTimeout(function(){\r\n+                    mem.close(idx, mem.last);\r\n+                }, mem.hint);\r\n+            }\r\n+        }\r\n+    }},\r\n+\r\n+    // (E) CLOSE PREVIOUSLY MIS-MATCHED CARDS\r\n+    close : function (aa, bb) {\r\n+        aa = mem.hCards[aa];\r\n+        bb = mem.hCards[bb];\r\n+        aa.classList.remove(\"wrong\");\r\n+        bb.classList.remove(\"wrong\");\r\n+        aa.classList.remove(\"open\");\r\n+        bb.classList.remove(\"open\");\r\n+        aa.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n+        bb.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n+        aa.onclick = mem.open;\r\n+        bb.onclick = mem.open;\r\n+        mem.locked = null;\r\n+        mem.last = null;\r\n+    }\r\n+};\r\n+\r\n+// (F) INIT GAME\r\n+window.addEventListener(\"DOMContentLoaded\", mem.preload);\r\n"
                }
            ],
            "date": 1638480110045,
            "name": "Commit-0",
            "content": "// import css from './css/style.css';\r\n\r\nrequire ('jquery')\r\n\r\n$(function(){\r\n\r\n})\r\n\r\nvar mem = {\r\n    // (A) PROPERTIES\r\n    // (A1) HTML ELEMENTS\r\n    hWrap : null, // HTML game wrapper\r\n    hCards : null, // HTML cards\r\n    // (A2) GAME SETTINGS\r\n    sets : 6, // Total number of cards to match\r\n    hint : 600, // How long to show mismatched cards\r\n    url : \"\", // Optional, URL to images\r\n    // (A3) FLAGS\r\n    loaded : 0, // Total number of assets loaded\r\n    time : 0,\r\n    moves : 0, // Total number of moves\r\n    last : null, // Last opened card\r\n    grid : null, // Current play grid\r\n    matches : null, // Current matched cards\r\n    locked : null, // 2 cards chosen did not match\r\n\r\n    // (B) PRELOAD\r\n    preload : function () {\r\n        // (B1) GET HTML GAME WRAPPER\r\n        mem.hWrap = document.getElementById(\"mem-game\");\r\n\r\n        // (B2) PRELOAD IMAGES\r\n        for (let i=0; i<=mem.sets; i++) {\r\n            let img = document.createElement(\"img\");\r\n            img.onload = function(){\r\n                mem.loaded++;\r\n                if (mem.loaded == mem.sets+1) { mem.init(); }\r\n            };\r\n            img.src = '../src/images/'+mem.url+\"smiley-\"+i+\".png\";\r\n        }\r\n    },\r\n\r\n    // (C) INIT GAME\r\n    init : function () {\r\n        // (C1) RESET\r\n        if (mem.locked != null) {\r\n            clearTimeout(mem.locked);\r\n            mem.locked = null;\r\n        }\r\n        mem.time = 0;\r\n        mem.hCards = [];\r\n        mem.grid = [];\r\n        mem.matches = [],\r\n            mem.moves = 0;\r\n        mem.last = null;\r\n        mem.locked = null;\r\n        mem.hWrap.innerHTML = \"\";\r\n\r\n        // (C2) RANDOM RESHUFFLE CARDS\r\n        // Credits : https://gomakethings.com/how-to-shuffle-an-array-with-vanilla-js/\r\n        let current = mem.sets * 2, temp, random;\r\n        for (var i=1; i<=mem.sets; i++) {\r\n            mem.grid.push(i);\r\n            mem.grid.push(i);\r\n        }\r\n        while (0 !== current) {\r\n            random = Math.floor(Math.random() * current);\r\n            current -= 1;\r\n            temp = mem.grid[current];\r\n            mem.grid[current] = mem.grid[random];\r\n            mem.grid[random] = temp;\r\n        }\r\n\r\n        // (C3) CREATE HTML CARDS\r\n        for (let i=0; i<mem.sets * 2; i++) {\r\n            let card = document.createElement(\"div\");\r\n            card.className = \"mem-card\";\r\n            card.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n            card.dataset.idx = i;\r\n            card.onclick = mem.open;\r\n            mem.hWrap.appendChild(card);\r\n            mem.hCards.push(card);\r\n        }\r\n    },\r\n\r\n    // (D) OPEN CARD\r\n    open : function () { if (mem.locked == null) {\r\n        if (mem.time == 0){\r\n            setInterval(function(){\r\n           mem.time++\r\n\r\n            }, 100)\r\n        }\r\n        \r\n        // (D1) OPEN SELECTED CARD\r\n        mem.moves++;\r\n        let idx = this.dataset.idx;\r\n        this.innerHTML = `<img src='../src/images/${mem.url}smiley-${mem.grid[idx]}.png'/>`;\r\n        this.onclick = \"\";\r\n        this.classList.add(\"open\");\r\n\r\n        // (D2) NO PREVIOUS GUESS - JUST RECORD AS OPENED\r\n        if (mem.last == null) { mem.last = idx; }\r\n\r\n        else {\r\n            // (D3) MATCHED AGAINST PREVIOUS GUESS\r\n            if (mem.grid[idx] == mem.grid[mem.last]) {\r\n                mem.matches.push(mem.last);\r\n                mem.matches.push(idx);\r\n                mem.hCards[mem.last].classList.remove(\"open\");\r\n                mem.hCards[idx].classList.remove(\"open\");\r\n                mem.hCards[mem.last].classList.add(\"right\");\r\n                mem.hCards[idx].classList.add(\"right\");\r\n                mem.last = null;\r\n                if (mem.matches.length == mem.sets * 2) {\r\n                    setTimeout(function(){\r\n                        alert(\"C'EST LA WIN !\"+\"\\r\\n\"+\"MOUVEMENTS : \" + mem.moves+ \"\\r\\n\"+\"TEMPS : \"+(mem.time/10)+\" s.\");\r\n                        mem.init();\r\n                    }, 100)\r\n                    \r\n                }\r\n            }\r\n\r\n            // (D4) NOT MATCHED - CLOSE BOTH CARDS ONLY AFTER A WHILE\r\n            else {\r\n                mem.hCards[mem.last].classList.add(\"wrong\");\r\n                mem.hCards[idx].classList.add(\"wrong\");\r\n                mem.locked = setTimeout(function(){\r\n                    mem.close(idx, mem.last);\r\n                }, mem.hint);\r\n            }\r\n        }\r\n    }},\r\n\r\n    // (E) CLOSE PREVIOUSLY MIS-MATCHED CARDS\r\n    close : function (aa, bb) {\r\n        aa = mem.hCards[aa];\r\n        bb = mem.hCards[bb];\r\n        aa.classList.remove(\"wrong\");\r\n        bb.classList.remove(\"wrong\");\r\n        aa.classList.remove(\"open\");\r\n        bb.classList.remove(\"open\");\r\n        aa.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n        bb.innerHTML = `<img src='../src/images/${mem.url}smiley-0.png'/>`;\r\n        aa.onclick = mem.open;\r\n        bb.onclick = mem.open;\r\n        mem.locked = null;\r\n        mem.last = null;\r\n    }\r\n};\r\n\r\n// (F) INIT GAME\r\nwindow.addEventListener(\"DOMContentLoaded\", mem.preload);\r\n"
        }
    ]
}